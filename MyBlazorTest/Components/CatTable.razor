@page "/catTable"
@using MyBlazorTest.Core
@using MyBlazorTest.Core.Models
@inject DataAccess Data;

<RadzenPanel Style="width: 100%" AllowCollapse="true">
    <HeaderTemplate>
        <RadzenLabel Text="Configuration" />
    </HeaderTemplate>
    <ChildContent>
        <RadzenCard>
            <RadzenCheckBox TValue="bool" @bind-Value="_configuration.Use" />
            <RadzenLabel Text=" Use" />
            <RadzenCheckBox TValue="bool" @bind-Value="_configuration.OrderAsc" />
            <RadzenLabel Text=" Order ascending" />
            <RadzenNumeric TValue="int" Min="1" Max="10" @bind-value="_configuration.PageNo" />
            <RadzenLabel Text=" PageNo" />
            <RadzenNumeric TValue="int" Min="1" Max="10" @bind-value="_configuration.PageSize" />
            <RadzenLabel Text=" PageSize" />
        </RadzenCard>
    </ChildContent>
</RadzenPanel>

<RadzenPanel Style="width: 100%" AllowCollapse="true">
    <HeaderTemplate>
        <RadzenLabel Text="Actions" />
    </HeaderTemplate>
    <ChildContent >
        <RadzenCard>
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Style="margin-left: 20px; width: 20%; "
                          Click="@ActionCreateAsync" Text="Create" />
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Style="margin-left: 20px; width: 20%; "
                          Click="@ActionReadAsync" Text="Read" />
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Style="margin-left: 20px; width: 20%; "
                          Click="@ActionUpdateAsync" Text="Update" />
            <RadzenButton ButtonStyle="ButtonStyle.Primary" Style="margin-left: 20px; width: 20%; "
                          Click="@ActionDeleteAsync" Text="Delete" />
        </RadzenCard>
    </ChildContent>
</RadzenPanel>

<RadzenPanel Style="width: 100%" AllowCollapse="true">
    <HeaderTemplate>
        <RadzenLabel Text="Data table" />
    </HeaderTemplate>
    <ChildContent>
        <RadzenDataList PageSize="1" WrapItems="true" AllowPaging="true" Data="@_cats" TItem="Cat">
            <Template Context="order">
                <RadzenCard Style="width:100%; height:50%; ">
                    @if (_cats == null)
                    {
                        <p><em>Loading...</em></p>
                    }
                    else
                    {
                        <table class="table">
                            <thead>
                            <tr>
                                <th>Name</th>
                                <th>Sex</th>
                                <th>Weight</th>
                            </tr>
                            </thead>
                            <tbody>
                            @foreach (var item in _cats)
                            {
                                <tr>
                                    <td>@item.Name</td>
                                    <td>@item.Sex</td>
                                    <td>@item.Weight</td>
                                </tr>
                            }
                            </tbody>
                        </table>
                    }</RadzenCard>
            </Template>
        </RadzenDataList>
    </ChildContent>
</RadzenPanel>

@code {
    private Cat[] _cats;
    private readonly DataConvert _convert = DataConvert.Instance;
    private readonly ReadConfiguration _configuration = new ReadConfiguration();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        await base.OnInitializedAsync().ConfigureAwait(false);

        await ActionReadAsync().ConfigureAwait(false);
    }

    private async Task ConfigClickApplyAsync()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);

    }

    private async Task ActionCreateAsync()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);

    }

    private async Task ActionReadAsync()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);

        var entities = new BaseEntity[0];
        var task = Task.Run(async () =>
        {
            await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
            entities = await Data.ReadAsync(_configuration).ConfigureAwait(false);
        });
        task.Wait();
        _cats = _convert.ToCats(entities);
    }

    private async Task ActionUpdateAsync()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);

    }

    private async Task ActionDeleteAsync()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);

    }
}
