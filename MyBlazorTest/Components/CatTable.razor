@page "/catTable"
@using MyBlazorTest.Core
@using MyBlazorTest.Core.Models
@inject DataAccess Data;

<div class="card" style="width:100%">
    <div class="card-body">
        <h3 class="card-title">Configuration</h3>
        <input style="width: 5%" type="checkbox" @bind="_configuration.Use" />
        <span style="width: 25%">Use</span>
        <span style="width: 5%"></span>
        <input style="width: 5%; align-content: end; " type="checkbox" @bind="_configuration.OrderAsc" />
        <span style="width: 25%">Order ascending</span>
        <br />
        <input style="width: 5%" type="text" @bind="_configuration.PageNo" />
        <span style="width: 25%">PageNo</span>
        <span style="width: 5%"></span>
        <input style="width: 5%; align-content: end; " type="text" @bind="_configuration.PageSize" />
        <span style="width: 25%">PageSize</span>
    </div>
</div>

<div class="card" style="width: 100%">
    <div class="card-body">
        <button class="btn btn-dark" style="width: 20%" @onclick="ActionCreateAsync">Create</button>
        <span style="width: 5%" ></span>
        <button class="btn btn-dark" style="width: 20%" @onclick="ActionReadAsync">Read</button>
        <span style="width: 5%"></span>
        <button class="btn btn-dark" style="width: 20%" @onclick="ActionUpdateAsync">Update</button>
        <span style="width: 5%"></span>
        <button class="btn btn-dark" style="width: 20%" @onclick="ActionDeleteAsync">Delete</button>
    </div>
</div>

<br />
@if (_cats == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Sex</th>
                <th>Weight</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in _cats)
            {
                <tr>
                    <td>@item.Name</td>
                    <td>@item.Sex</td>
                    <td>@item.Weight</td>
                </tr>
            }
        </tbody>
        @*<td>
                @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
                @Html.ActionLink("Details", "Details", new { id = item.Id }) |
                @Html.ActionLink("Delete", "Delete", new { id = item.Id })
            </td>*@
    </table>
}


@code {
    private Cat[] _cats;
    private readonly DataConvert _convert = DataConvert.Instance;
    private readonly ReadConfiguration _configuration = new ReadConfiguration();

    protected override async Task OnInitializedAsync()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
        await base.OnInitializedAsync().ConfigureAwait(false);

        await ActionReadAsync().ConfigureAwait(false);
    }

    private async Task ConfigClickApplyAsync()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);

    }

    private async Task ActionCreateAsync()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);

    }

    private async Task ActionReadAsync()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);

        var entities = new BaseEntity[0];
        var task = Task.Run(async () =>
        {
            await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);
            entities = await Data.ReadAsync(_configuration).ConfigureAwait(false);
        });
        task.Wait();
        _cats = _convert.ToCats(entities);
    }

    private async Task ActionUpdateAsync()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);

    }

    private async Task ActionDeleteAsync()
    {
        await Task.Delay(TimeSpan.FromMilliseconds(1)).ConfigureAwait(false);

    }
}
